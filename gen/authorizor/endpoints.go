// Code generated by goa v3.5.5, DO NOT EDIT.
//
// authorizor endpoints
//
// Command:
// $ goa gen github.com/vinhphuctadang/authorizor/design

package authorizor

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "authorizor" service endpoints.
type Endpoints struct {
	Register goa.Endpoint
	Ping     goa.Endpoint
}

// NewEndpoints wraps the methods of the "authorizor" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Register: NewRegisterEndpoint(s),
		Ping:     NewPingEndpoint(s),
	}
}

// Use applies the given middleware to all the "authorizor" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Register = m(e.Register)
	e.Ping = m(e.Ping)
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "authorizor".
func NewRegisterEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RegisterPayload)
		return s.Register(ctx, p)
	}
}

// NewPingEndpoint returns an endpoint function that calls the method "ping" of
// service "authorizor".
func NewPingEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Ping(ctx)
	}
}
